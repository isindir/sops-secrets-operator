version: 2

jobs:
  ##################################################
  # release
  ##################################################
  release:
    working_directory: /home/circleci/gogo/src/github.com/isindir/eks-ebs-node-operator
    machine:
      image: ubuntu-1604:202004-01
    environment:
      GOLANG_VERSION: 1.14.2
      # https://github.com/operator-framework/operator-sdk/releases
      OPERATOR_SDK_VERSION: v0.13.0
      # https://github.com/github/hub/releases
      HUB_VERSION: 2.14.2
      # https://github.com/git-chglog/git-chglog/releases
      GIT_CHGLOG_VERSION: 0.9.1
    steps:
      - checkout
      - run:
          name: install golang
          command: |
            sudo rm -fr /usr/local/go
            curl -sSLO https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
            tar -xzf go${GOLANG_VERSION}.linux-amd64.tar.gz
            sudo mv go /usr/local
            rm -fr go${GOLANG_VERSION}.linux-amd64.tar.gz
            mkdir -p $GOPATH/{src/github.com/isindir,bin,pkg}
            go get -u golang.org/x/lint/golint
            go version
            go env
      - restore-cache:
          keys:
            - v2-modules-{{ .Branch }}-{{ checksum "go.sum" }}
            - v2-modules-{{ .Branch }}-
            - v2-modules-
      - run:
          name: install operator-sdk
          command: |
            curl -sSLo operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_VERSION}/operator-sdk-${OPERATOR_SDK_VERSION}-x86_64-linux-gnu
            chmod +x operator-sdk
            sudo mv operator-sdk /usr/local/bin/
      - run:
          name: install git-chglog
          command: |
            curl -sSLo git-chglog https://github.com/git-chglog/git-chglog/releases/download/${GIT_CHGLOG_VERSION}/git-chglog_linux_amd64
            chmod +x git-chglog
            sudo mv git-chglog /usr/local/bin/
      - run:
          name: install hub
          command: |
            curl -sSLO https://github.com/github/hub/releases/download/v${HUB_VERSION}/hub-linux-amd64-${HUB_VERSION}.tgz
            tar -xzf hub-linux-amd64-${HUB_VERSION}.tgz
            chmod +x hub-linux-amd64-${HUB_VERSION}/bin/hub
            sudo mv hub-linux-amd64-${HUB_VERSION}/bin/hub /usr/local/bin/
      - run:
          name: Fetch Go dependencies
          command: |
            make mod
      - run:
          name: Build
          command: |
            make build
      - run:
          name: release
          command: |
            make release

  ##################################################
  # build
  ##################################################
  build:
    working_directory: /home/circleci/gogo/src/github.com/isindir/sops-secrets-operator
    machine:
      image: ubuntu-1604:202004-01
    environment:
      # https://github.com/kubernetes/kubernetes/releases
      K8S_VERSION: v1.18.3
      # https://github.com/kubernetes-sigs/kind/releases
      KIND_VERSION: v0.8.1
      # https://github.com/helm/helm/releases
      HELM_VERSION: v3.2.1
      GOLANG_VERSION: 1.14.2
      # https://github.com/operator-framework/operator-sdk/releases
      OPERATOR_SDK_VERSION: v0.13.0
      # https://github.com/mozilla/sops/releases
      SOPS_VERSION: v3.5.0

      KUBECONFIG: /home/circleci/.kube/config

      GOPATH: /home/circleci/gogo
      GOROOT: /usr/local/go
      GO111MODULE: "on"
      GO15VENDOREXPERIMENT: 1
    steps:
      - checkout
      - restore-cache:
          keys:
            - v2-modules-{{ .Branch }}-{{ checksum "go.sum" }}
            - v2-modules-{{ .Branch }}-
            - v2-modules-
      - run:
          name: install golang
          command: |
            sudo rm -fr ${GOROOT}
            curl -sSLO https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
            tar -xzf go${GOLANG_VERSION}.linux-amd64.tar.gz
            sudo mv go /usr/local
            rm -fr go${GOLANG_VERSION}.linux-amd64.tar.gz
            mkdir -p $GOPATH/{src/github.com/isindir,bin,pkg}
            go get -u golang.org/x/lint/golint
            go version
            go env
      - run:
          name: install gpg2
          command: |
            sudo apt update
            sudo apt install -f
            sudo apt-get install gnupg2 -y
      - run:
          name: install kubectl
          command: |
            curl -sSLo kubectl https://storage.googleapis.com/kubernetes-release/release/${K8S_VERSION}/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: install sops
          command: |
            curl -sSLo sops https://github.com/mozilla/sops/releases/download/${SOPS_VERSION}/sops-${SOPS_VERSION}.linux
            chmod +x sops
            sudo mv sops /usr/local/bin/
      - run:
          name: install operator-sdk
          command: |
            curl -sSLo operator-sdk https://github.com/operator-framework/operator-sdk/releases/download/${OPERATOR_SDK_VERSION}/operator-sdk-${OPERATOR_SDK_VERSION}-x86_64-linux-gnu
            chmod +x operator-sdk
            sudo mv operator-sdk /usr/local/bin/
      - run:
          name: install kind
          command: |
            curl -sSLo kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-linux-amd64
            chmod +x kind
            sudo mv kind /usr/local/bin/
      - run:
          name: start kind
          command: |
            kind create cluster --name operator
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done

            # Dump cluster info
            kubectl cluster-info
            kubectl version
            kubectl describe node operator-control-plane
      - run:
          name: setup helm
          command: |
            # install helm
            curl -sSL https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar -xzvf - linux-amd64/helm
            chmod +x linux-amd64/helm
            sudo mv linux-amd64/helm /usr/local/bin/
            rm -fr linux-amd64
            helm version
      # real fun starts here
      - run:
          name: Fetch Go dependencies
          command: |
            make mod
      - run:
          name: Build
          command: |
            make build
      - save_cache:
          key: v2-modules-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/gogo/pkg"
      - run:
          name: Run Local Tests
          command: |
            export GNUPGHOME="$(mktemp -d)"
            cat >$GNUPGHOME/foo <<EOF
                %echo Generating a basic OpenPGP key
                Key-Type: DSA
                Key-Length: 1024
                Subkey-Type: ELG-E
                Subkey-Length: 1024
                Name-Real: Joe Tester
                Name-Comment: with stupid passphrase
                Name-Email: joe@foo.bar
                Expire-Date: 0
                Passphrase: abc
                %no-protection
                %commit
                %echo done
            EOF
            gpg2 --batch --gen-key $GNUPGHOME/foo
            export SOPS_GPG_EXEC=$( which gpg2 )
            export FP=$( gpg2 --with-colons --fingerprint | awk -F: '$1 == "fpr" {print $10; exit}' )
            echo "Fingreprint: $FP ; gpg executable: $SOPS_GPG_EXEC"

            # Run k8s related commands
            kubectl create namespace sops
            kubectl apply -f deploy/crds/isindir_v1alpha1_sopssecret_crd.yaml
            sleep 3
            sops -e -p $FP                    \
              --encrypted-suffix='_templates' \
              deploy/crds/00init.yaml         \
              > 00init.enc.yaml
            kubectl apply -f 00init.enc.yaml --namespace sops
            sleep 3
            nohup make run/local &
            sleep 75
            kubectl get sops --namespace sops
            echo
            kubectl get secrets --namespace sops
            echo
            export SECRETS_NUMBER=$( kubectl get secrets --namespace sops \
              | awk '$0!~/default-token/ && $0!~/NAME/ { print $1; }' \
              | wc -l )
            if [[ $SECRETS_NUMBER -ne 3 ]]; then
              echo "Expected number of secrets in sops namespace is 3 - Failed"
              exit 1
            fi
            # Delete to check GC works
            kubectl delete -f 00init.enc.yaml --namespace sops
            sleep 15
            kubectl get sops --namespace sops
            echo
            kubectl get secrets --namespace sops
            echo
            export SECRETS_NUMBER=$( kubectl get secrets --namespace sops \
              | awk '$0!~/default-token/ && $0!~/NAME/ { print $1; }' \
              | wc -l )
            if [[ $SECRETS_NUMBER -ne 0 ]]; then
              echo "Expected number of secrets in sops namespace is 0 - Failed"
              exit 1
            fi
            rm -fr $GNUPGHOME
      - run:
          name: Run Tests
          command: |
            export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
            make test

workflows:
  version: 2
  build_and_release:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
      - release:
          filters:
            branches:
              only:
                - master
