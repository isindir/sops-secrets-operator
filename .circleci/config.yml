version: 2

jobs:
  ##################################################
  # release
  ##################################################
  release:
    working_directory: /home/circleci/gogo/src/github.com/isindir/sops-secrets-operator
    # UPDATE_HERE
    machine: &machine
      # https://circleci.com/developer/machine/image/ubuntu-2204
      # https://githubmemory.com/repo/rancher/k3d/issues/807
      #  It doesn't happen anymore after upgrading from Docker 2.10.2 and containerd 1.4.3 to Docker 2.10.9 and containerd 1.4.11
      image: ubuntu-2204:2023.07.2
    environment: &versions
      # https://github.com/kubernetes/kubernetes/releases
      KUBECTL_VERSION: v1.28.4
      # https://hub.docker.com/r/rancher/k3s/tags
      K3S_VERSION: v1.28.3-k3s2
      # https://github.com/rancher/k3d/releases
      K3D_VERSION: v5.6.0
      # https://github.com/helm/helm/releases
      HELM_VERSION: v3.13.2
      # https://golang.org/dl/
      GOLANG_VERSION: "1.21.4"
      # https://github.com/kubernetes-sigs/kubebuilder/releases
      KUBEBUILDER_VERSION: 3.13.0
      # https://github.com/mozilla/sops/releases
      SOPS_VERSION: v3.8.1
      # https://github.com/kubernetes-sigs/kustomize/releases
      KUSTOMIZE_VERSION: v5.2.1
      # https://github.com/helm-unittest/helm-unittest/releases
      HELM_UNITTEST_VERSION: 0.3.6
      # https://github.com/instrumenta/kubeval/releases
      KUBEVAL_VERSION: 0.16.1
      # https://github.com/github/hub/releases
      HUB_VERSION: 2.14.2
      # https://github.com/git-chglog/git-chglog/releases
      GIT_CHGLOG_VERSION: 0.15.4
      # https://github.com/docker/buildx/releases
      BUILDX_BINARY_VERSION: 0.12.0

      DOCKER_BUILDKIT: 1
      BUILDX_PLATFORMS: linux/amd64,linux/arm64

      KUBECONFIG: /home/circleci/.kube/config

      GOPATH: /home/circleci/gogo
      GOROOT: /usr/local/go
      GO111MODULE: "on"
      GO15VENDOREXPERIMENT: 1
    steps:
      - checkout
      - run:
          name: install buildx
          command: |
            mkdir -p ~/.docker/cli-plugins
            curl -sSLo docker-buildx https://github.com/docker/buildx/releases/download/v${BUILDX_BINARY_VERSION}/buildx-v${BUILDX_BINARY_VERSION}.linux-amd64
            chmod a+x docker-buildx
            mv docker-buildx ~/.docker/cli-plugins/docker-buildx
            docker buildx install
            # Run binfmt
            docker run --rm --privileged tonistiigi/binfmt:latest --install "${BUILDX_PLATFORMS}"
          background: true
      - run:
          name: install kubebuilder
          command: |
            curl -sSLO https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${KUBEBUILDER_VERSION}/kubebuilder_linux_amd64
            chmod a+x kubebuilder_linux_amd64
            sudo mv kubebuilder_linux_amd64 /usr/local/bin/kubebuilder
          background: true
      - run:
          name: install kustomize
          command: |
            curl -sSLO https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64.tar.gz
            tar -xzf kustomize_${KUSTOMIZE_VERSION}_linux_amd64.tar.gz
            chmod +x kustomize
            sudo mv kustomize /usr/local/bin/
          background: true
      - run:
          name: install git-chglog
          command: |
            curl -sSLO https://github.com/git-chglog/git-chglog/releases/download/v${GIT_CHGLOG_VERSION}/git-chglog_${GIT_CHGLOG_VERSION}_linux_amd64.tar.gz
            tar -xzf git-chglog_${GIT_CHGLOG_VERSION}_linux_amd64.tar.gz
            chmod +x git-chglog
            sudo mv git-chglog /usr/local/bin/
      - run:
          name: install hub
          command: |
            curl -sSLO https://github.com/github/hub/releases/download/v${HUB_VERSION}/hub-linux-amd64-${HUB_VERSION}.tgz
            tar -xzf hub-linux-amd64-${HUB_VERSION}.tgz
            chmod +x hub-linux-amd64-${HUB_VERSION}/bin/hub
            sudo mv hub-linux-amd64-${HUB_VERSION}/bin/hub /usr/local/bin/
          background: true
      - run:
          name: install golang
          command: |
            sudo rm -fr /usr/local/go
            curl -sSLO https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
            tar -xzf go${GOLANG_VERSION}.linux-amd64.tar.gz
            sudo mv go /usr/local
            rm -fr go${GOLANG_VERSION}.linux-amd64.tar.gz
            mkdir -p $GOPATH/{src/github.com/isindir,bin,pkg}
            go get -u golang.org/x/lint/golint
            go version
            go env
      - run:
          name: release
          command: |
            make docker-login
            make release

  ##################################################
  # build
  ##################################################
  build:
    working_directory: /home/circleci/gogo/src/github.com/isindir/sops-secrets-operator
    machine: *machine
    environment: *versions
    steps:
      - checkout
      - restore-cache:
          keys:
            - v2-modules-{{ .Branch }}-{{ checksum "go.sum" }}
            - v2-modules-{{ .Branch }}-
            - v2-modules-
      - run:
          name: install gpg2
          command: |
            sudo apt update
            sudo apt install -f
            sudo apt-get install gnupg2 -y
            sudo apt-get install qemu-user-static -y
            #sudo apt-get --only-upgrade install containerd -y
          background: true
      - run:
          name: install buildx
          command: |
            mkdir -p ~/.docker/cli-plugins
            curl -sSLo docker-buildx https://github.com/docker/buildx/releases/download/v${BUILDX_BINARY_VERSION}/buildx-v${BUILDX_BINARY_VERSION}.linux-amd64
            chmod a+x docker-buildx
            mv docker-buildx ~/.docker/cli-plugins/docker-buildx
            docker buildx install
            # Run binfmt
            docker run --rm --privileged tonistiigi/binfmt:latest --install "${BUILDX_PLATFORMS}"
          background: true
      - run:
          name: install golang
          command: |
            sudo rm -fr ${GOROOT}
            curl -sSLO https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz
            tar -xzf go${GOLANG_VERSION}.linux-amd64.tar.gz
            sudo mv go /usr/local
            rm -fr go${GOLANG_VERSION}.linux-amd64.tar.gz
            mkdir -p $GOPATH/{src/github.com/isindir,bin,pkg}
            go get -u golang.org/x/lint/golint
            go version
            go env
          background: true
      - run:
          name: install sops
          command: |
            curl -sSLo sops https://github.com/getsops/sops/releases/download/${SOPS_VERSION}/sops-${SOPS_VERSION}.linux.amd64
            chmod +x sops
            sudo mv sops /usr/local/bin/
          background: true
      - run:
          name: install kubebuilder
          command: |
            curl -sSLO https://github.com/kubernetes-sigs/kubebuilder/releases/download/v${KUBEBUILDER_VERSION}/kubebuilder_linux_amd64
            chmod a+x kubebuilder_linux_amd64
            sudo mv kubebuilder_linux_amd64 /usr/local/bin/kubebuilder
          background: true
      - run:
          name: install kustomize
          command: |
            curl -sSLO https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/${KUSTOMIZE_VERSION}/kustomize_${KUSTOMIZE_VERSION}_linux_amd64.tar.gz
            tar -xzf kustomize_${KUSTOMIZE_VERSION}_linux_amd64.tar.gz
            chmod +x kustomize
            sudo mv kustomize /usr/local/bin/
          background: true
      - run:
          name: install helm
          command: |
            # install helm
            curl -sSL https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar -xzvf - linux-amd64/helm
            chmod +x linux-amd64/helm
            sudo mv linux-amd64/helm /usr/local/bin/
            rm -fr linux-amd64
            helm version
            # install helm-unittest plugin
            helm plugin install https://github.com/helm-unittest/helm-unittest --version ${HELM_UNITTEST_VERSION}
            helm unittest --help
          background: true
      - run:
          name: install kubeval
          command: |
            # install kubeval
            curl -sSL https://github.com/instrumenta/kubeval/releases/download/v${KUBEVAL_VERSION}/kubeval-linux-amd64.tar.gz | tar -xzvf - kubeval
            chmod +x kubeval
            sudo mv kubeval /usr/local/bin/
            kubeval --version
          background: true
      - run:
          name: install kubectl
          command: |
            curl -sSLo kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            mkdir -p ${HOME}/.kube
            touch ${HOME}/.kube/config
      - run:
          name: install k3d
          command: |
            curl -sSLo k3d https://github.com/rancher/k3d/releases/download/${K3D_VERSION}/k3d-linux-amd64
            chmod +x k3d
            sudo mv k3d /usr/local/bin/
      - run:
          name: start k3d
          command: |
            docker version
            k3d cluster create operator --agents 1 --image rancher/k3s:${K3S_VERSION}
            JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}';
            until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do
              sleep 1;
            done

            # Dump cluster info
            kubectl cluster-info
            which kubectl
            kubectl version
            kubectl describe node k3d-operator-server-0
            kubectl describe node k3d-operator-agent-0
      - run:
          name: Unit tests and envtest integration tests
          command: |
            make test
      # helm tests
      - run:
          name: Test helm charts
          command: |
            make test-helm
      # k3d integration tests
      - run:
          name: In cluster integration tests
          command: |
            export GNUPGHOME="$(mktemp -d)"
            cat >$GNUPGHOME/foo <<EOF
                %echo Generating a basic OpenPGP key
                Key-Type: DSA
                Key-Length: 1024
                Subkey-Type: ELG-E
                Subkey-Length: 1024
                Name-Real: Joe Tester
                Name-Comment: with stupid passphrase
                Name-Email: joe@foo.bar
                Expire-Date: 0
                Passphrase: abc
                %no-protection
                %commit
                %echo done
            EOF
            gpg2 --batch --gen-key $GNUPGHOME/foo
            export SOPS_GPG_EXEC=$( which gpg2 )
            export FP=$( gpg2 --with-colons --fingerprint | awk -F: '$1 == "fpr" {print $10; exit}' )
            echo "Fingreprint: $FP ; gpg executable: $SOPS_GPG_EXEC"

            # Run k8s related commands
            kubectl create namespace sops
            make install
            sleep 3
            sops -e -p $FP \
              --encrypted-suffix='Templates' \
              config/samples/isindir_v1alpha3_sopssecret.yaml \
              > config/samples/isindir_v1alpha3_sopssecret.enc.yaml
            file config/samples/isindir_v1alpha3_sopssecret.enc.yaml
            echo "====================================="
            cat config/samples/isindir_v1alpha3_sopssecret.enc.yaml
            echo "====================================="
            kubectl apply -f config/samples/isindir_v1alpha3_sopssecret.enc.yaml --namespace sops
            sleep 3
            nohup make run &
            sleep 150
            kubectl get sops --namespace sops
            echo
            kubectl get secrets --namespace sops
            echo
            export SECRETS_NUMBER=$( kubectl get secrets --namespace sops --no-headers \
              | awk '$0 !~ /default-token/ { print $1; }' \
              | wc -l )
            if [[ $SECRETS_NUMBER -ne 5 ]]; then
              echo "Expected number of secrets in sops namespace is 5 - Failed"
              tail -40 nohup.out
              exit 1
            fi
            # Check specific k8s for amount of data entries
            ## my-secret-name-0
            export DATA_ENTRIES=$( kubectl get secrets my-secret-name-0 --namespace sops --no-headers \
              | awk '{print $3}' )
            if [[ $DATA_ENTRIES -ne 2 ]]; then
              echo "Expected number of data entries in my-secret-name-0 is 2 - Failed"
              tail -40 nohup.out
              exit 1
            fi
            ## my-secret-name-1
            export DATA_ENTRIES=$( kubectl get secrets my-secret-name-1 --namespace sops --no-headers \
              | awk '{print $3}' )
            if [[ $DATA_ENTRIES -ne 3 ]]; then
              echo "Expected number of data entries in my-secret-name-1 is 3 - Failed"
              tail -40 nohup.out
              exit 1
            fi
            ## my-secret-name-2
            export DATA_ENTRIES=$( kubectl get secrets my-secret-name-2 --namespace sops --no-headers \
              | awk '{print $3}' )
            if [[ $DATA_ENTRIES -ne 2 ]]; then
              echo "Expected number of data entries in my-secret-name-2 is 2 - Failed"
              tail -40 nohup.out
              exit 1
            fi
            # Delete to check GC works
            kubectl delete -f config/samples/isindir_v1alpha3_sopssecret.enc.yaml --namespace sops
            sleep 15
            kubectl get sops --namespace sops
            echo
            kubectl get secrets --namespace sops
            echo
            export SECRETS_NUMBER=$( kubectl get secrets --namespace sops \
              | awk '$0!~/default-token/ && $0!~/NAME/ { print $1; }' \
              | wc -l )
            if [[ $SECRETS_NUMBER -ne 0 ]]; then
              echo "Expected number of secrets in sops namespace is 0 - Failed"
              exit 1
            fi
            rm -fr $GNUPGHOME
      - run:
          name: Docker build
          command: |
            make docker-login
            make docker-cross-build
          no_output_timeout: 1h
      - save_cache:
          key: v2-modules-{{ .Branch }}-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/gogo/pkg"

workflows:
  version: 2
  build_and_release:
    jobs:
      - build:
          filters:
            branches:
              ignore: master
      - release:
          filters:
            branches:
              only:
                - master
